package ciociaria.annunci.it.service;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.zip.CRC32;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import ciociaria.annunci.it.controller.dto.AnnuncioMotoriDto;
import ciociaria.annunci.it.controller.dto.mapper.AnnuncioMotoriFromDtoMapper;
import ciociaria.annunci.it.model.bean.Amministratore;
import ciociaria.annunci.it.model.bean.AnnuncioMotori;
import ciociaria.annunci.it.model.bean.DataAnnuncio;
import ciociaria.annunci.it.model.bean.Modifica;
import ciociaria.annunci.it.model.bean.Stato;
import ciociaria.annunci.it.model.bean.UtenteComune;
import ciociaria.annunci.it.model.repository.AnnunciMotoriRepository;
import ciociaria.annunci.it.utils.Constants;
import ciociaria.annunci.it.utils.ErrorMessages;
import ciociaria.annunci.it.utils.StatoEnum;
import ciociaria.annunci.it.utils.exceptions.DataAccessValidationException;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import jakarta.validation.Validator;
import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class AnnunciService {

	private static final Logger logger = LoggerFactory.getLogger(AnnunciService.class);

	@Autowired
	private AnnunciMotoriRepository repositoryMotori;
	@Autowired
	private AnnuncioMotoriFromDtoMapper mapperAnnuncioMotori;
	
	@Autowired
	private UtenteService utenteService;

	private final String UTENTE_AMMINISTRATORE = "Amministratore";	// TODO: da eliminare

	@Autowired
	private Validator validator;
	
	
	/**
	 * Restituisce tutti gli annunci per la categoria motori registrati nel database
	 *
	 * @return: elenco degli annunci motori
	 */
	public List<AnnuncioMotori> findAllAnnunciMotori() {
		return repositoryMotori.findAll();
	}
	
	/**
	 * Restituisce tutti gli annunci per la categoria motori registrati nel database
	 *
	 * @return: elenco degli annunci motori
	 */
	public AnnuncioMotori findAnnuncioMotori(String idAnnuncio) {
		List<Optional<AnnuncioMotori>> elenco = repositoryMotori.findByIdAnnuncio(idAnnuncio);
		if(elenco.size() == 0) return null;
		return elenco.get(0).orElse(null);
	}//65fd8250

	/**
	 * Salva un nuovo annuncio motori nel database.
	 *
	 * Questo metodo prende un oggetto AnnuncioMotoriDto come input e lo converte in un oggetto AnnuncioMotori, che viene quindi salvato nel
	 * database. Vengono effettuate diverse operazioni durante questo processo, tra cui l'assegnazione di valori predefiniti, il calcolo dell'ID
	 * univoco per l'annuncio, il salvataggio delle immagini associate e la gestione delle eccezioni.
	 *
	 * @param annuncioDto L'oggetto AnnuncioMotoriDto contenente i dati dell'annuncio da salvare.
	 * @return L'annuncio motori appena salvato nel database.
	 * @throws DataAccessValidationException Se si verificano errori di validazione dei dati o errori durante il salvataggio dell'annuncio.
	 */
	public AnnuncioMotori saveAnnuncioMotori(AnnuncioMotoriDto annuncioDto) {
		try {
			AnnuncioMotori annuncio = mapperAnnuncioMotori.apply(annuncioDto);									// mapping dto - bean

			Amministratore utente = utenteService.findUtenteAmministratoreByUsername(UTENTE_AMMINISTRATORE);	// ricerca dell'utente nel database

			UtenteComune inseritoDa = utenteService.convertFromUtenteToUtenteComune(utente);
			
			// modifica di default per un nuovo annuncio
			annuncio.setInseritoDa(inseritoDa);									// TODO: impostazione temporanea, appena viene implementata il login deve essere rimossa
			annuncio.setNumeroVisite(0);																			// numero di visite impostate di default a zero
			annuncio.setDataAnnuncio(new DataAnnuncio(LocalDateTime.now(), LocalDateTime.now().plusMonths(4)));		// data di scadenza tra 4 mesi dall'inserimento
			annuncio.setStato(new Stato(StatoEnum.Attivo.toString(), LocalDateTime.now()));							// stato attivo con data corrente di inserimento
			annuncio.setModifica(new Modifica(inseritoDa, LocalDateTime.now()));

			// calcolo dell'id da mostrare all'utente
			long current = Instant.now().toEpochMilli();		// prendendo l'attuale data la probabilità di avere collisione è molto bassa
			String param = annuncio.getInseritoDa().getId() + current;
			String id = calculateCRC32Hash(param);
			annuncio.setIdAnnuncio(id);

			// salva le immagini inserite dall'utente
			List<String> pathImages = new ArrayList<>();
			if (annuncioDto.getFotoAnnuncio() != null) {
				for (MultipartFile image : annuncioDto.getFotoAnnuncio()) {
					try {
						SimpleDateFormat formatDate = new SimpleDateFormat("yyyyMMddHHmmssSSS");
						String date = formatDate.format(new Date());
						String nameImage = String.format("%s_%s", annuncio.getIdAnnuncio(), date);

						Path pathImage = Paths.get(Constants.PATH_SAVE_IMG, nameImage);
						File targetFile = pathImage.toFile();
						
						if (!targetFile.getParentFile().exists()) {
							targetFile.getParentFile().mkdirs();
						}

						Files.copy(image.getInputStream(), pathImage, StandardCopyOption.REPLACE_EXISTING);		// salvataggio su disco

						pathImages.add(nameImage);								// aggiunta all'elenco delle foto dell'annuncio
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			if (pathImages.size() > 0) {
				annuncio.setFotoAnnuncio(pathImages);
			}

			Set<ConstraintViolation<AnnuncioMotori>> violations = validator.validate(annuncio);
			if (!violations.isEmpty()) {
				throw new ConstraintViolationException(violations);
			}

			logger.info("Inserimento di un nuovo annuncio effettuato da {}", annuncio.getInseritoDa().getEmail());
			AnnuncioMotori result = repositoryMotori.save(annuncio);
			return result;
		} catch (ConstraintViolationException e) {
			String errorMessage = ErrorMessages.ANNUNCIO_VALIDAZIONE_ERROR_MSG + e.getMessage();
			logger.error(errorMessage + "\nI dati inseriti sono i seguenti: " + annuncioDto.toString());
			throw new DataAccessValidationException(errorMessage);
		} catch (DataAccessException e) {
			logger.error(ErrorMessages.ANNUNCIO_SAVE_ERROR_MSG + ": " + e.getMessage() + "\nI dati inseriti sono i seguenti: " + annuncioDto.toString());
			throw new DataAccessValidationException(ErrorMessages.ANNUNCIO_SAVE_ERROR_MSG);
		} catch (DataAccessValidationException e) {
			throw e;	// errore proveniente dal mapper
		} catch (Exception e) {
			logger.error(ErrorMessages.ANNUNCIO_SAVE_GENERIC_ERROR_MSG + ": " + e.getMessage() + "\nI dati inseriti sono i seguenti: " + annuncioDto.toString());
			throw new DataAccessValidationException(ErrorMessages.ANNUNCIO_SAVE_GENERIC_ERROR_MSG);
		}
	}

	/**
	 * Algoritmo utilizzato per calcolare l'id dell'annuncio da mostrare all'utente
	 * 
	 * @param input
	 * @return id
	 */
	private static String calculateCRC32Hash(String input) {
		CRC32 crc32 = new CRC32();
		crc32.update(input.getBytes());
		return String.format("%08x", crc32.getValue());
	}

}
