package ciociaria.annunci.it.service;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.zip.CRC32;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import ciociaria.annunci.it.controller.dto.AnnuncioMotoriDto;
import ciociaria.annunci.it.controller.dto.mapper.AnnuncioMotoriFromDtoMapper;
import ciociaria.annunci.it.model.bean.Annuncio;
import ciociaria.annunci.it.model.bean.AnnuncioAltro;
import ciociaria.annunci.it.model.bean.AnnuncioAmoriIncontri;
import ciociaria.annunci.it.model.bean.AnnuncioCasaPersona;
import ciociaria.annunci.it.model.bean.AnnuncioElettronica;
import ciociaria.annunci.it.model.bean.AnnuncioFormazione;
import ciociaria.annunci.it.model.bean.AnnuncioImmobile;
import ciociaria.annunci.it.model.bean.AnnuncioInCitta;
import ciociaria.annunci.it.model.bean.AnnuncioLavoro;
import ciociaria.annunci.it.model.bean.AnnuncioMotori;
import ciociaria.annunci.it.model.bean.AnnuncioSportHobby;
import ciociaria.annunci.it.model.bean.DataAnnuncio;
import ciociaria.annunci.it.model.bean.Modifica;
import ciociaria.annunci.it.model.bean.Stato;
import ciociaria.annunci.it.model.bean.UtenteComune;
import ciociaria.annunci.it.model.repository.AnnunciAltroRepository;
import ciociaria.annunci.it.model.repository.AnnunciAmoriIncontriRepository;
import ciociaria.annunci.it.model.repository.AnnunciCasaPersonaRepository;
import ciociaria.annunci.it.model.repository.AnnunciElettronicaRepository;
import ciociaria.annunci.it.model.repository.AnnunciFormazioneRepository;
import ciociaria.annunci.it.model.repository.AnnunciImmobileRepository;
import ciociaria.annunci.it.model.repository.AnnunciInCittaRepository;
import ciociaria.annunci.it.model.repository.AnnunciLavoroRepository;
import ciociaria.annunci.it.model.repository.AnnunciMotoriRepository;
import ciociaria.annunci.it.model.repository.AnnunciSportHobbyRepository;
import ciociaria.annunci.it.utils.CategoriaEnum;
import ciociaria.annunci.it.utils.CategoriaUtils;
import ciociaria.annunci.it.utils.Constants;
import ciociaria.annunci.it.utils.ErrorMessages;
import ciociaria.annunci.it.utils.StatoEnum;
import ciociaria.annunci.it.utils.exceptions.DataAccessValidationException;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import jakarta.validation.Validator;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AnnunciService {
	private static final Logger logger = LoggerFactory.getLogger(AnnunciService.class);

	private final AnnunciMotoriRepository repositoryMotori;
	private final AnnuncioMotoriFromDtoMapper mapperAnnuncioMotori;

	private final AnnunciLavoroRepository repositoryLavoro;
	private final AnnunciImmobileRepository repositoryImmobile;
	private final AnnunciElettronicaRepository repositoryElettronica;
	private final AnnunciCasaPersonaRepository repositoryCasaPersona;
	private final AnnunciSportHobbyRepository repositorySportHobby;
	private final AnnunciInCittaRepository repositoryInCitta;
	private final AnnunciFormazioneRepository repositoryFormazione;
	private final AnnunciAmoriIncontriRepository repositoryAmoriIncontri;
	private final AnnunciAltroRepository repositoryAltro;

	private final UtenteService utenteService;

	private final Validator validator;

	/**
	 * Cerca l'annuncio corrispondente all'id all'interno del database
	 * 
	 * @param idAnnuncio
	 * @return annuncio cercato
	 */
	public Annuncio findAnnuncioByIdAnnuncio(String idAnnuncio, CategoriaEnum categoria) {
		// TODO: implementare i converter dove necessario

		List<Annuncio> elenco = findAnnuncioByCategoria(categoria);
		if (elenco == null || elenco.size() == 0) {
			logger.error("Annunci con categoria '{}' non sono stati trovati nel database. La ricerca è stata effettuata dall'utente '{}'.",
																			categoria, UtenteService.getEmailCurrentLoggedUser());
			throw new DataAccessValidationException(ErrorMessages.ANNUNCIO_NOT_FOUND);
		}

		Annuncio annuncio = elenco.stream().filter(a -> idAnnuncio.equals(a.getIdAnnuncio())).toList().stream().findFirst()
																		.orElse(null);

		if (annuncio == null) {
			logger.error("Annuncio con ID '{}' e categoria '{}' non è stato trovato nel database. La ricerca è stata effettuata dall'utente '{}'.",
																			idAnnuncio, categoria,
																			UtenteService.getEmailCurrentLoggedUser());
			throw new DataAccessValidationException(ErrorMessages.ANNUNCIO_NOT_FOUND);
		}

		return annuncio;
	}

	/**
	 * Restituisce tutti gli annunci per la categoria motori registrati nel database
	 *
	 * @return: elenco degli annunci motori
	 */
	public List<AnnuncioMotori> findAllAnnunciMotori() {
		return repositoryMotori.findAll();
	}

	/**
	 * Restituisce l'annuncio corrispondente all'id registrato nel database
	 *
	 * @return: annuncio cercato
	 */
	public AnnuncioMotori findAnnuncioMotoriByIdAnnuncio(String idAnnuncio) {
		if (idAnnuncio == null)
			return null;
		List<Optional<AnnuncioMotori>> elenco = repositoryMotori.findByIdAnnuncio(idAnnuncio);
		if (elenco.size() == 0)
			return null;
		return elenco.get(0).orElse(null);
	}

	/**
	 * Restituisce un elenco di annunci che corrispondono alla categoria cercata
	 * 
	 * @param categoria
	 * @return annuncio cercato
	 */
	public List<Annuncio> findAnnuncioByCategoria(CategoriaEnum categoria) {

		if (categoria == null) {
			throw new DataAccessValidationException(ErrorMessages.CATEGORIA_NOT_FOUND);
		}

		List<Annuncio> elencoAnnunci = new ArrayList<>();

		switch (categoria) {
		case MOTORI: {
			List<AnnuncioMotori> elenco = findAllAnnunciMotori();
			elencoAnnunci.addAll(elenco);
			break;
		}
		case LAVORO: {
			List<AnnuncioLavoro> elenco = findAllAnnunciLavoro();
			elencoAnnunci.addAll(elenco);
			break;
		}
		case FORMAZIONE: {
			List<AnnuncioFormazione> elenco = findAllAnnunciFormazione();
			elencoAnnunci.addAll(elenco);
			break;
		}
		case ELETTRONICA: {
			List<AnnuncioElettronica> elenco = findAllAnnunciElettronica();
			elencoAnnunci.addAll(elenco);
			break;
		}
		case PERLACASAELAPERSONA: {
			List<AnnuncioCasaPersona> elenco = findAllAnnunciCasaPersona();
			elencoAnnunci.addAll(elenco);
			break;
		}
		case AMORIEINCONTRI: {
			List<AnnuncioAmoriIncontri> elenco = findAllAnnunciAmoriIncontri();
			elencoAnnunci.addAll(elenco);
			break;
		}
		case IMMOBILI: {
			List<AnnuncioImmobile> elenco = findAllAnnunciImmobile();
			elencoAnnunci.addAll(elenco);
			break;
		}
		case INCITTA: {
			List<AnnuncioInCitta> elenco = findAllAnnunciInCitta();
			elencoAnnunci.addAll(elenco);
			break;
		}
		case SPORTEHOBBY: {
			List<AnnuncioSportHobby> elenco = findAllAnnunciSportHobby();
			elencoAnnunci.addAll(elenco);
			break;
		}
		case ALTRO: {
			List<AnnuncioAltro> elenco = findAllAnnunciAltro();
			elencoAnnunci.addAll(elenco);
			break;
		}
		default:
			logger.error("Annunci con categoria '{}' non sono stati trovati nel database. La ricerca è stata effettuata dall'utente '{}'.",
																			categoria, UtenteService.getEmailCurrentLoggedUser());
			throw new DataAccessValidationException(ErrorMessages.ANNUNCIO_NOT_FOUND);
		}

		return elencoAnnunci;
	}

	/**
	 * Salva un nuovo annuncio motori nel database.
	 *
	 * Questo metodo prende un oggetto AnnuncioMotoriDto come input e lo converte in un oggetto AnnuncioMotori, che viene quindi salvato nel
	 * database. Vengono effettuate diverse operazioni durante questo processo, tra cui l'assegnazione di valori predefiniti, il calcolo dell'ID
	 * univoco per l'annuncio, il salvataggio delle immagini associate e la gestione delle eccezioni.
	 *
	 * @param annuncioDto L'oggetto AnnuncioMotoriDto contenente i dati dell'annuncio da salvare.
	 * @return L'annuncio motori appena salvato nel database.
	 * @throws DataAccessValidationException Se si verificano errori di validazione dei dati o errori durante il salvataggio dell'annuncio.
	 */
	public AnnuncioMotori saveAnnuncioMotori(AnnuncioMotoriDto annuncioDto) {
		try {
			AnnuncioMotori annuncio = mapperAnnuncioMotori.apply(annuncioDto);									// mapping dto - bean

			String emailAutore = UtenteService.getEmailCurrentLoggedUser();
			UtenteComune inseritoDa = utenteService.findUtenteByEmail(emailAutore);
			if (inseritoDa == null) {
				throw new DataAccessValidationException(ErrorMessages.ERRORE_ACCESSO_NON_AUTORIZZATO);
			}

			// modifica di default per un nuovo annuncio
			annuncio.setInseritoDa(inseritoDa);
			annuncio.setNumeroVisite(0);																			// numero di visite impostate di default a zero
			annuncio.setDataAnnuncio(new DataAnnuncio(LocalDateTime.now(), LocalDateTime.now().plusMonths(4)));		// data di scadenza tra 4 mesi dall'inserimento
			annuncio.setStato(new Stato(StatoEnum.Attivo.toString(), LocalDateTime.now()));							// stato attivo con data corrente di inserimento
			annuncio.setModifica(new Modifica(inseritoDa, LocalDateTime.now()));

			// calcolo dell'id da mostrare all'utente
			long current = Instant.now().toEpochMilli();		// prendendo l'attuale data la probabilità di avere collisione è molto bassa
			String param = annuncio.getInseritoDa().getId() + current;
			String id = calculateCRC32Hash(param);
			annuncio.setIdAnnuncio(id);

			// salva le immagini inserite dall'utente
			List<String> pathImages = new ArrayList<>();
			if (annuncioDto.getFotoAnnuncio() != null) {
				for (MultipartFile image : annuncioDto.getFotoAnnuncio()) {
					try {
						SimpleDateFormat formatDate = new SimpleDateFormat("yyyyMMddHHmmssSSS");
						String date = formatDate.format(new Date());
						String nameImage = String.format("%s_%s", annuncio.getIdAnnuncio(), date);

						Path pathImage = Paths.get(Constants.PATH_SAVE_IMG, nameImage);
						File targetFile = pathImage.toFile();

						if (!targetFile.getParentFile().exists()) {
							targetFile.getParentFile().mkdirs();
						}

						Files.copy(image.getInputStream(), pathImage, StandardCopyOption.REPLACE_EXISTING);		// salvataggio su disco

						pathImages.add(nameImage);								// aggiunta all'elenco delle foto dell'annuncio
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			if (pathImages.size() > 0) {
				annuncio.setFotoAnnuncio(pathImages);
			}

			Set<ConstraintViolation<AnnuncioMotori>> violations = validator.validate(annuncio);
			if (!violations.isEmpty()) {
				throw new ConstraintViolationException(violations);
			}

			AnnuncioMotori result = repositoryMotori.insert(annuncio);
			logger.info("Inserimento di un nuovo annuncio effettuato da '{}'", annuncio.getInseritoDa().getEmail());
			return result;
		} catch (ConstraintViolationException e) {
			String errorMessage = ErrorMessages.ERRORE_ANNUNCIO_VALIDAZIONE + e.getMessage();
			logger.error("{} - I dati inseriti sono i seguenti: '{}'.", errorMessage, annuncioDto.toString());
			throw new DataAccessValidationException(errorMessage);
		} catch (DataAccessException e) {
			logger.error("{} - {} - I dati inseriti sono i seguenti: '{}'.'", ErrorMessages.ERRORE_ANNUNCIO_SAVE, e.getMessage(),
																			annuncioDto.toString());
			throw new DataAccessValidationException(ErrorMessages.ERRORE_ANNUNCIO_SAVE);
		} catch (DataAccessValidationException e) {
			throw e;	// errore proveniente dal mapper
		} catch (Exception e) {
			logger.error("{} - {} - I dati inseriti sono i seguenti: ", e.getMessage(),
																			ErrorMessages.ERRORE_ANNUNCIO_SAVE_GENERIC,
																			annuncioDto.toString());
			e.printStackTrace();
			throw new DataAccessValidationException(ErrorMessages.ERRORE_ANNUNCIO_SAVE_GENERIC);
		}
	}

	/**
	 * Algoritmo utilizzato per calcolare l'id dell'annuncio da mostrare all'utente
	 * 
	 * @param input
	 * @return id
	 */
	private static String calculateCRC32Hash(String input) {
		CRC32 crc32 = new CRC32();
		crc32.update(input.getBytes());
		return String.format("%08x", crc32.getValue());
	}

	/**
	 * Restituisce un elenco di annunci consigliati da mostrare che possono interessare
	 *
	 * @return: elenco degli annunci lavoro
	 */
	public List<Annuncio> fetchAnnunciConsigliati(CategoriaEnum categoria) {
		if (categoria == null)
			return new ArrayList<>();

		List<Annuncio> elencoAnnunci = findAnnuncioByCategoria(categoria);

		// 1° CRITERIO DI FILTRAGGIO : categoria
		elencoAnnunci.stream().filter(annuncio -> categoria.equals(CategoriaUtils.categoriaFromString(
																		annuncio.getSottocategoria().getCategoria())));

		// 2° CRITERIO DI FILTRAGGIO : ordina per data di annuncio
		elencoAnnunci.stream().sorted((a, b) -> a.getDataAnnuncio().getDataPubblicazione()
																		.compareTo(b.getDataAnnuncio().getDataPubblicazione()));

		// 2° CRITERIO DI FILTRAGGIO : prendi i primi 10 annunci
		return elencoAnnunci.stream().limit(10).toList();
	}

	/**
	 * Restituisce tutti gli annunci per la categoria lavoro registrati nel database
	 *
	 * @return: elenco degli annunci lavoro
	 */
	public List<AnnuncioLavoro> findAllAnnunciLavoro() {
		return repositoryLavoro.findAll();
	}

	/**
	 * Restituisce l'annuncio corrispondente all'id registrato nel database
	 *
	 * @return: annuncio cercato
	 */
	public AnnuncioLavoro findAnnuncioLavoroByIdAnnuncio(String idAnnuncio) {
		if (idAnnuncio == null)
			return null;
		List<Optional<AnnuncioLavoro>> elenco = repositoryLavoro.findByIdAnnuncio(idAnnuncio);
		if (elenco.size() == 0)
			return null;
		return elenco.get(0).orElse(null);
	}

	/**
	 * Restituisce tutti gli annunci per la categoria immobile registrati nel database
	 *
	 * @return: elenco degli annunci immobile
	 */
	public List<AnnuncioImmobile> findAllAnnunciImmobile() {
		return repositoryImmobile.findAll();
	}

	/**
	 * Restituisce l'annuncio corrispondente all'id registrato nel database
	 *
	 * @return: annuncio cercato
	 */
	public AnnuncioImmobile findAnnuncioImmobileByIdAnnuncio(String idAnnuncio) {
		if (idAnnuncio == null)
			return null;
		List<Optional<AnnuncioImmobile>> elenco = repositoryImmobile.findByIdAnnuncio(idAnnuncio);
		if (elenco.size() == 0)
			return null;
		return elenco.get(0).orElse(null);
	}

	/**
	 * Restituisce tutti gli annunci per la categoria elettronica registrati nel database
	 *
	 * @return: elenco degli annunci elettronica
	 */
	public List<AnnuncioElettronica> findAllAnnunciElettronica() {
		return repositoryElettronica.findAll();
	}

	/**
	 * Restituisce l'annuncio corrispondente all'id registrato nel database
	 *
	 * @return: annuncio cercato
	 */
	public AnnuncioElettronica findAnnuncioElettronicaByIdAnnuncio(String idAnnuncio) {
		if (idAnnuncio == null)
			return null;
		List<Optional<AnnuncioElettronica>> elenco = repositoryElettronica.findByIdAnnuncio(idAnnuncio);
		if (elenco.size() == 0)
			return null;
		return elenco.get(0).orElse(null);
	}

	/**
	 * Restituisce tutti gli annunci per la categoria Casa - Persona registrati nel database
	 *
	 * @return: elenco degli annunci CasaPersona
	 */
	public List<AnnuncioCasaPersona> findAllAnnunciCasaPersona() {
		return repositoryCasaPersona.findAll();
	}

	/**
	 * Restituisce l'annuncio corrispondente all'id registrato nel database
	 *
	 * @return: annuncio cercato
	 */
	public AnnuncioCasaPersona findAnnuncioCasaPersonaByIdAnnuncio(String idAnnuncio) {
		if (idAnnuncio == null)
			return null;
		List<Optional<AnnuncioCasaPersona>> elenco = repositoryCasaPersona.findByIdAnnuncio(idAnnuncio);
		if (elenco.size() == 0)
			return null;
		return elenco.get(0).orElse(null);
	}

	/**
	 * Restituisce tutti gli annunci per la categoria Sport - Hobby registrati nel database
	 *
	 * @return: elenco degli annunci SportHobby
	 */
	public List<AnnuncioSportHobby> findAllAnnunciSportHobby() {
		return repositorySportHobby.findAll();
	}

	/**
	 * Restituisce l'annuncio corrispondente all'id registrato nel database
	 *
	 * @return: annuncio cercato
	 */
	public AnnuncioSportHobby findAnnuncioSportHobbyByIdAnnuncio(String idAnnuncio) {
		if (idAnnuncio == null)
			return null;
		List<Optional<AnnuncioSportHobby>> elenco = repositorySportHobby.findByIdAnnuncio(idAnnuncio);
		if (elenco.size() == 0)
			return null;
		return elenco.get(0).orElse(null);
	}

	/**
	 * Restituisce tutti gli annunci per la categoria In Città registrati nel database
	 *
	 * @return: elenco degli annunci InCitta
	 */
	public List<AnnuncioInCitta> findAllAnnunciInCitta() {
		return repositoryInCitta.findAll();
	}

	/**
	 * Restituisce l'annuncio corrispondente all'id registrato nel database
	 *
	 * @return: annuncio cercato
	 */
	public AnnuncioInCitta findAnnuncioInCittaByIdAnnuncio(String idAnnuncio) {
		if (idAnnuncio == null)
			return null;
		List<Optional<AnnuncioInCitta>> elenco = repositoryInCitta.findByIdAnnuncio(idAnnuncio);
		if (elenco.size() == 0)
			return null;
		return elenco.get(0).orElse(null);
	}

	/**
	 * Restituisce tutti gli annunci per la categoria formazioneregistrati nel database
	 *
	 * @return: elenco degli annunci formazione
	 */
	public List<AnnuncioFormazione> findAllAnnunciFormazione() {
		return repositoryFormazione.findAll();
	}

	/**
	 * Restituisce l'annuncio corrispondente all'id registrato nel database
	 *
	 * @return: annuncio cercato
	 */
	public AnnuncioFormazione findAnnuncioFormazioneByIdAnnuncio(String idAnnuncio) {
		if (idAnnuncio == null)
			return null;
		List<Optional<AnnuncioFormazione>> elenco = repositoryFormazione.findByIdAnnuncio(idAnnuncio);
		if (elenco.size() == 0)
			return null;
		return elenco.get(0).orElse(null);
	}

	/**
	 * Restituisce tutti gli annunci per la categoria amori e incontri registrati nel database
	 *
	 * @return: elenco degli annunci AmoriIncontri
	 */
	public List<AnnuncioAmoriIncontri> findAllAnnunciAmoriIncontri() {
		return repositoryAmoriIncontri.findAll();
	}

	/**
	 * Restituisce l'annuncio corrispondente all'id registrato nel database
	 *
	 * @return: annuncio cercato
	 */
	public AnnuncioAmoriIncontri findAnnuncioAmoriIncontriByIdAnnuncio(String idAnnuncio) {
		if (idAnnuncio == null)
			return null;
		List<Optional<AnnuncioAmoriIncontri>> elenco = repositoryAmoriIncontri.findByIdAnnuncio(idAnnuncio);
		if (elenco.size() == 0)
			return null;
		return elenco.get(0).orElse(null);
	}

	/**
	 * Restituisce tutti gli annunci per la categoria altro registrati nel database
	 *
	 * @return: elenco degli annunci altro
	 */
	public List<AnnuncioAltro> findAllAnnunciAltro() {
		return repositoryAltro.findAll();
	}

	/**
	 * Restituisce l'annuncio corrispondente all'id registrato nel database
	 *
	 * @return: annuncio cercato
	 */
	public AnnuncioAltro findAnnuncioAltroByIdAnnuncio(String idAnnuncio) {
		if (idAnnuncio == null)
			return null;
		List<Optional<AnnuncioAltro>> elenco = repositoryAltro.findByIdAnnuncio(idAnnuncio);
		if (elenco.size() == 0)
			return null;
		return elenco.get(0).orElse(null);
	}

}
