package ciociaria.annunci.it.service;

import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import ciociaria.annunci.it.model.bean.DettagliAnnunci;
import ciociaria.annunci.it.model.bean.DettagliAnnunciCasaPersona;
import ciociaria.annunci.it.model.bean.DettagliAnnunciElettronica;
import ciociaria.annunci.it.model.bean.DettagliAnnunciFormazione;
import ciociaria.annunci.it.model.bean.DettagliAnnunciInCitta;
import ciociaria.annunci.it.model.bean.DettagliAnnunciMotori;
import ciociaria.annunci.it.model.bean.DettagliAnnunciSportHobby;
import ciociaria.annunci.it.model.bean.DettagliAnnuncioImmobili;
import ciociaria.annunci.it.model.bean.DettagliAnnuncioLavoro;
import ciociaria.annunci.it.model.bean.Servizio;
import ciociaria.annunci.it.model.bean.Settore;
import ciociaria.annunci.it.model.bean.Sottocategoria;
import ciociaria.annunci.it.model.bean.VeicoliDisponibili;
import ciociaria.annunci.it.model.repository.DettagliAnnunciCasaPersonaRepository;
import ciociaria.annunci.it.model.repository.DettagliAnnunciElettronicaRepository;
import ciociaria.annunci.it.model.repository.DettagliAnnunciFormazioneRepository;
import ciociaria.annunci.it.model.repository.DettagliAnnunciImmobiliRepository;
import ciociaria.annunci.it.model.repository.DettagliAnnunciInCittaRepository;
import ciociaria.annunci.it.model.repository.DettagliAnnunciLavoroRepository;
import ciociaria.annunci.it.model.repository.DettagliAnnunciMotoriRepository;
import ciociaria.annunci.it.model.repository.DettagliAnnunciRepository;
import ciociaria.annunci.it.model.repository.DettagliAnnunciSportHobbyRepository;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import jakarta.validation.Validator;

@Service
public class DettagliAnnunciService {

	@Autowired
	private DettagliAnnunciRepository repository;
	@Autowired
	private DettagliAnnunciMotoriRepository repositoryMotori;
	@Autowired
	private DettagliAnnunciLavoroRepository repositoryLavoro;
	@Autowired
	private DettagliAnnunciImmobiliRepository repositoryImmobili;
	@Autowired
	private DettagliAnnunciElettronicaRepository repositoryElettronica;
	@Autowired
	private DettagliAnnunciCasaPersonaRepository repositoryCasaPersona;
	@Autowired
	private DettagliAnnunciSportHobbyRepository repositorySportHobby;
	@Autowired
	private DettagliAnnunciInCittaRepository repositoryInCitta;
	@Autowired
	private DettagliAnnunciFormazioneRepository repositoryFormazione;
	@Autowired
	private SottocategoriaService serviceSottocategoria;

	@Autowired
	private Validator validator;

	private DettagliAnnunci dettaglioGenerale = null;

	// TODO: fare tutte le validazioni e fare delle query personalizzate in modo da cancellare solo alcuni dettagli di annunci

	/**
	 * Restituisce tutti i dettagli di carattere generale registrati nel database
	 *
	 * @param
	 * @return: dettaglio annuncio
	 */
	public List<DettagliAnnunci> findAllDettagliAnnunci() {
		return repository.findAll();
	}

	/**
	 * Elimina tutti i dettagli di annunci registrati nel database
	 *
	 * @param
	 * @return
	 */
	public void deleteAllDettagliAnnunci() {
		repository.deleteAll();
		repositoryMotori.deleteAll();
		repositoryLavoro.deleteAll();
	}

	/**
	 * Aggiornamento di tutti i dettagli di un annuncio generale con valori di default
	 *
	 * @param
	 * @return: dettaglio annuncio aggiornato
	 */
	public DettagliAnnunci updateAllDettagliAnnunci() {
		deleteAllDettagliAnnunci();

		List<String> elencoMotiviSegnalazione = SetOfDataDettagliAnnunci.getMotivisegnalazione();
		List<String> elencoMotiviRimozione = SetOfDataDettagliAnnunci.getMotivirimozione();
		List<String> elencoStati = SetOfDataDettagliAnnunci.getStati();
		List<String> elencoTipiInserzionisti = SetOfDataDettagliAnnunci.getTipiInserzionisti();

		dettaglioGenerale = new DettagliAnnunci();
		dettaglioGenerale.setMotiviSegnalazione(elencoMotiviSegnalazione);
		dettaglioGenerale.setMotiviRimozione(elencoMotiviRimozione);
		dettaglioGenerale.setStati(elencoStati);
		dettaglioGenerale.setTipiInserzionista(elencoTipiInserzionisti);
		repository.save(dettaglioGenerale);

		return dettaglioGenerale;
	}

	/**
	 * Aggiornamento di tutti i dettagli di un annuncio motori con valori di default
	 *
	 * @param
	 * @return: dettaglio annuncio aggiornato
	 */
	public List<DettagliAnnunciMotori> updateAllDettagliAnnunciMotori() {
		deleteAllDettagliAnnunci();	// elimina tutti i dettagli

		// prende tutti i dati di default per l'aggiornamento
		Map<String, List<String>> mapCondizioniVeicolo = SetOfDataDettagliAnnunciMotori.featuresCondizioneVeicolo;
		List<String> elencoCambi = SetOfDataDettagliAnnunciMotori.getCambio();
		List<String> elencoColore = SetOfDataDettagliAnnunciMotori.getColore();
		List<String> elencoAlimentazione = SetOfDataDettagliAnnunciMotori.getAlimentazione();
		List<Integer> elencoPorte = SetOfDataDettagliAnnunciMotori.getPorte();
		Map<String, List<VeicoliDisponibili>> mapTipologieVeicolo = SetOfDataDettagliAnnunciMotori.getVeicoliDisponibili();
		List<String> elencoSottocategorieInteressateTipologiaVeicolo = new ArrayList<>(mapTipologieVeicolo.keySet());
		Map<String, List<String>> mapTipologiaMotori = SetOfDataDettagliAnnunciMotori.getTipologiaMotori();

		// inizializza le variabili
		List<DettagliAnnunciMotori> elencoDettagli = new ArrayList<>();
		List<Sottocategoria> elencoSottocategorie = serviceSottocategoria.findAllSottocategoria();
		elencoSottocategorie.removeIf(sottocategoria -> !sottocategoria.getCategoria().equals(SetOfDataSottocategoria.MOTORI));

		// per ogni sottocategoria andiamo a creare un dettaglio annuncio specifico
		for (Sottocategoria sottocategoria : elencoSottocategorie) {
			DettagliAnnunciMotori dettaglio = new DettagliAnnunciMotori();
			dettaglio.setSottocategoria(sottocategoria);

			if (dettaglioGenerale == null) {
				updateAllDettagliAnnunci();
			}
			dettaglio.setMotiviSegnalazione(dettaglioGenerale.getMotiviSegnalazione());
			dettaglio.setMotiviRimozione(dettaglioGenerale.getMotiviRimozione());
			dettaglio.setStati(dettaglioGenerale.getStati());
			dettaglio.setTipiInserzionista(dettaglioGenerale.getTipiInserzionista());

			EnumSet<ElencoFeaturesMotori> elencoFeatures = SetOfDataDettagliAnnunciMotori.getFeatures()
																			.get(sottocategoria.getSottocategoria());

			if (elencoFeatures.contains(ElencoFeaturesMotori.CONDIZIONE_VEICOLO)) {
				dettaglio.setCondizioneVeicolo(mapCondizioniVeicolo.get(sottocategoria.getSottocategoria()));
			}

			if (elencoFeatures.contains(ElencoFeaturesMotori.TIPOLOGIA_VEICOLO) && elencoSottocategorieInteressateTipologiaVeicolo
																			.contains(sottocategoria.getSottocategoria())) {
				dettaglio.setTipologieVeicolo(mapTipologieVeicolo.get(sottocategoria.getSottocategoria()));
			}

			if (elencoFeatures.contains(ElencoFeaturesMotori.ALIMENTAZIONE)) {
				dettaglio.setAlimentazione(elencoAlimentazione);
			}

			if (elencoFeatures.contains(ElencoFeaturesMotori.CAMBIO)) {
				dettaglio.setCambio(elencoCambi);
			}

			if (elencoFeatures.contains(ElencoFeaturesMotori.COLORE)) {
				dettaglio.setColore(elencoColore);
			}

			if (elencoFeatures.contains(ElencoFeaturesMotori.PORTE)) {
				// elencoPorte.add(8);
				dettaglio.setPorte(elencoPorte);
			}

			if (elencoFeatures.contains(ElencoFeaturesMotori.TIPOLOGIA_MOTORI)) {
				dettaglio.setTipologieMotori(mapTipologiaMotori.get(sottocategoria.getSottocategoria()));
			}

			Set<ConstraintViolation<DettagliAnnunciMotori>> violations = validator.validate(dettaglio);
			if (!violations.isEmpty()) {
				throw new ConstraintViolationException(violations);
			}

			repositoryMotori.save(dettaglio);
			elencoDettagli.add(dettaglio);
		}

		return elencoDettagli;
	}

	/**
	 * Aggiornamento di tutti i dettagli di un annuncio lavoro con valori di default
	 *
	 * @param
	 * @return: dettaglio annuncio aggiornato
	 */
	public List<DettagliAnnuncioLavoro> updateAllDettagliAnnunciLavoro() {
		deleteAllDettagliAnnunci();	// elimina tutti i dettagli

		// prende tutti i dati di default per l'aggiornamento
		List<Settore> elencoSettori = SetOfDataDettagliAnnunciLavoro.getSettori();
		List<Servizio> elencoServizi = SetOfDataDettagliAnnunciLavoro.getServizi();
		List<String> elencoContratti = SetOfDataDettagliAnnunciLavoro.getContratti();
		List<String> elencoTitoliStudio = SetOfDataDettagliAnnunciLavoro.getTitoliStudio();
		List<String> elencoLivelli = SetOfDataDettagliAnnunciLavoro.getLivelli();
		List<String> elencoOrari = SetOfDataDettagliAnnunciLavoro.getOrari();
		List<String> elencoCondizioni = SetOfDataDettagliAnnunciLavoro.getCondizioni();

		// inizializza le variabili
		List<DettagliAnnuncioLavoro> elencoDettagli = new ArrayList<>();
		List<Sottocategoria> elencoSottocategorie = serviceSottocategoria.findAllSottocategoria();
		elencoSottocategorie.removeIf(sottocategoria -> !sottocategoria.getCategoria().equals(SetOfDataSottocategoria.LAVORO));

		// per ogni sottocategoria andiamo a creare un dettaglio annuncio specifico
		for (Sottocategoria sottocategoria : elencoSottocategorie) {
			DettagliAnnuncioLavoro dettaglio = new DettagliAnnuncioLavoro();
			dettaglio.setSottocategoria(sottocategoria);

			if (dettaglioGenerale == null) {
				updateAllDettagliAnnunci();
			}
			dettaglio.setMotiviSegnalazione(dettaglioGenerale.getMotiviSegnalazione());
			dettaglio.setMotiviRimozione(dettaglioGenerale.getMotiviRimozione());
			dettaglio.setStati(dettaglioGenerale.getStati());
			dettaglio.setTipiInserzionista(dettaglioGenerale.getTipiInserzionista());

			EnumSet<ElencoFeaturesLavoro> elencoFeatures = SetOfDataDettagliAnnunciLavoro.getFeatures()
																			.get(sottocategoria.getSottocategoria());

			if (elencoFeatures.contains(ElencoFeaturesLavoro.SETTORE)) {
				dettaglio.setSettori(elencoSettori);
			}

			if (elencoFeatures.contains(ElencoFeaturesLavoro.SERVIZI)) {
				dettaglio.setServizi(elencoServizi);
			}

			if (elencoFeatures.contains(ElencoFeaturesLavoro.CONTRATTO)) {
				dettaglio.setContratto(elencoContratti);
			}

			if (elencoFeatures.contains(ElencoFeaturesLavoro.CONDIZIONE)) {
				dettaglio.setTitoloStudio(elencoTitoliStudio);
			}

			if (elencoFeatures.contains(ElencoFeaturesLavoro.LIVELLO)) {
				dettaglio.setLivello(elencoLivelli);
			}

			if (elencoFeatures.contains(ElencoFeaturesLavoro.ORARIO)) {
				dettaglio.setOrario(elencoOrari);
			}

			if (elencoFeatures.contains(ElencoFeaturesLavoro.CONDIZIONE)) {
				dettaglio.setCondizione(elencoCondizioni);
			}

			repositoryLavoro.save(dettaglio);
			elencoDettagli.add(dettaglio);
		}

		return elencoDettagli;
	}

	/**
	 * Aggiornamento di tutti i dettagli di un annuncio immobile con valori di default
	 *
	 * @param
	 * @return: dettaglio annuncio aggiornato
	 */
	public List<DettagliAnnuncioImmobili> updateAllDettagliAnnunciImmobili() {
		deleteAllDettagliAnnunci();	// elimina tutti i dettagli

		// prende tutti i dati di default per l'aggiornamento
		List<String> elencoStatoImmobile = SetOfDataDettagliAnnunciImmobili.getElencoStatoImmobile();
		List<String> elencoLocali = SetOfDataDettagliAnnunciImmobili.getElencoLocali();
		List<String> elencoPiano = SetOfDataDettagliAnnunciImmobili.getElencoPiano();
		List<String> elencoBagni = SetOfDataDettagliAnnunciImmobili.getElencoBagni();
		List<String> elencoParcheggio = SetOfDataDettagliAnnunciImmobili.getElencoParcheggio();
		List<String> elencoRiscaldamento = SetOfDataDettagliAnnunciImmobili.getElencoRiscaldamento();
		List<String> elencoClasseEnergetica = SetOfDataDettagliAnnunciImmobili.getElencoClasseEnergetica();
		Map<String, List<String>> elencoTipologiaImmobile = SetOfDataDettagliAnnunciImmobili.getElencoTipologiaImmobile();
		List<String> elencoAffittasiA = SetOfDataDettagliAnnunciImmobili.getElencoAffittasiA();
		List<String> elencoFumatori = SetOfDataDettagliAnnunciImmobili.getElencoFumatori();

		// inizializza le variabili
		List<DettagliAnnuncioImmobili> elencoDettagli = new ArrayList<>();
		List<Sottocategoria> elencoSottocategorie = serviceSottocategoria.findAllSottocategoria();
		elencoSottocategorie.removeIf(sottocategoria -> !sottocategoria.getCategoria().equals(SetOfDataSottocategoria.IMMOBILI));

		// per ogni sottocategoria andiamo a creare un dettaglio annuncio specifico
		for (Sottocategoria sottocategoria : elencoSottocategorie) {
			DettagliAnnuncioImmobili dettaglio = new DettagliAnnuncioImmobili();
			dettaglio.setSottocategoria(sottocategoria);

			if (dettaglioGenerale == null) {
				updateAllDettagliAnnunci();
			}
			dettaglio.setMotiviSegnalazione(dettaglioGenerale.getMotiviSegnalazione());
			dettaglio.setMotiviRimozione(dettaglioGenerale.getMotiviRimozione());
			dettaglio.setStati(dettaglioGenerale.getStati());
			dettaglio.setTipiInserzionista(dettaglioGenerale.getTipiInserzionista());

			EnumSet<ElencoFeaturesImmobili> elencoFeatures = SetOfDataDettagliAnnunciImmobili.getFeatures()
																			.get(sottocategoria.getSottocategoria());

			if (elencoFeatures != null) {

				if (elencoFeatures.contains(ElencoFeaturesImmobili.STATO_IMMOBILE)) {
					dettaglio.setStatoImmobile(elencoStatoImmobile);
				}

				if (elencoFeatures.contains(ElencoFeaturesImmobili.LOCALI)) {
					dettaglio.setLocali(elencoLocali);
				}

				if (elencoFeatures.contains(ElencoFeaturesImmobili.PIANO)) {
					dettaglio.setPiano(elencoPiano);
				}

				if (elencoFeatures.contains(ElencoFeaturesImmobili.BAGNI)) {
					dettaglio.setBagni(elencoBagni);
				}

				if (elencoFeatures.contains(ElencoFeaturesImmobili.PARCHEGGIO)) {
					dettaglio.setParcheggio(elencoParcheggio);
				}

				if (elencoFeatures.contains(ElencoFeaturesImmobili.RISCALDAMENTO)) {
					dettaglio.setRiscaldamento(elencoRiscaldamento);
				}

				if (elencoFeatures.contains(ElencoFeaturesImmobili.CLASSE_ENERGETICA)) {
					dettaglio.setClasseEnergetica(elencoClasseEnergetica);
				}

				if (elencoFeatures.contains(ElencoFeaturesImmobili.TIPOLOGIA_IMMOBILE)) {
					dettaglio.setTipologiaImmobile(elencoTipologiaImmobile.get(sottocategoria.getSottocategoria()));
				}

				if (elencoFeatures.contains(ElencoFeaturesImmobili.AFFITTASI_A)) {
					dettaglio.setAffittasiA(elencoAffittasiA);
				}

				if (elencoFeatures.contains(ElencoFeaturesImmobili.FUMATORI)) {
					dettaglio.setFumatori(elencoFumatori);
				}
			}

			repositoryImmobili.save(dettaglio);
			elencoDettagli.add(dettaglio);
		}

		return elencoDettagli;
	}

	/**
	 * Aggiornamento di tutti i dettagli di un annuncio elettronica con valori di default
	 *
	 * @param
	 * @return: dettaglio annuncio aggiornato
	 */
	public List<DettagliAnnunciElettronica> updateAllDettagliAnnunciElettronica() {
		deleteAllDettagliAnnunci();	// elimina tutti i dettagli

		// prende tutti i dati di default per l'aggiornamento
		Map<String, List<String>> elencoTipologiaElettronica = SetOfDataDettagliAnnuniElettronica.getElencoTipologiaElettronica();
		List<String> elencoCondizioneElettronica = SetOfDataDettagliAnnuniElettronica.getElencoCondizioneElettronica();

		// inizializza le variabili
		List<DettagliAnnunciElettronica> elencoDettagli = new ArrayList<>();
		List<Sottocategoria> elencoSottocategorie = serviceSottocategoria.findAllSottocategoria();
		elencoSottocategorie.removeIf(sottocategoria -> !sottocategoria.getCategoria()
																		.equals(SetOfDataSottocategoria.ELETTRONICA));

		// per ogni sottocategoria andiamo a creare un dettaglio annuncio specifico
		for (Sottocategoria sottocategoria : elencoSottocategorie) {
			DettagliAnnunciElettronica dettaglio = new DettagliAnnunciElettronica();
			dettaglio.setSottocategoria(sottocategoria);

			if (dettaglioGenerale == null) {
				updateAllDettagliAnnunci();
			}
			dettaglio.setMotiviSegnalazione(dettaglioGenerale.getMotiviSegnalazione());
			dettaglio.setMotiviRimozione(dettaglioGenerale.getMotiviRimozione());
			dettaglio.setStati(dettaglioGenerale.getStati());
			dettaglio.setTipiInserzionista(dettaglioGenerale.getTipiInserzionista());

			dettaglio.setTipologiaElettronica(elencoTipologiaElettronica.get(sottocategoria.getSottocategoria()));
			dettaglio.setCondizioneElettronica(elencoCondizioneElettronica);

			repositoryElettronica.save(dettaglio);
			elencoDettagli.add(dettaglio);
		}

		return elencoDettagli;
	}

	/**
	 * Aggiornamento di tutti i dettagli di un annuncio casa e persona con valori di default
	 *
	 * @param
	 * @return: dettaglio annuncio aggiornato
	 */
	public List<DettagliAnnunciCasaPersona> updateAllDettagliAnnunciCasaPersona() {
		deleteAllDettagliAnnunci();	// elimina tutti i dettagli

		// prende tutti i dati di default per l'aggiornamento
		List<String> elencoCondizione = SetOfDataDettagliAnnunciCasaPersona.getElencoCondizione();
		Map<String, List<String>> elencoTipologia = SetOfDataDettagliAnnunciCasaPersona.getElencoTipologia();
		List<String> elencoPer = SetOfDataDettagliAnnunciCasaPersona.getElencoPer();
		List<String> elencoFasciDiEta = SetOfDataDettagliAnnunciCasaPersona.getElencoFasciDiEta();

		// inizializza le variabili
		List<DettagliAnnunciCasaPersona> elencoDettagli = new ArrayList<>();
		List<Sottocategoria> elencoSottocategorie = serviceSottocategoria.findAllSottocategoria();
		elencoSottocategorie.removeIf(sottocategoria -> !sottocategoria.getCategoria().equals(SetOfDataSottocategoria.CASA));

		// per ogni sottocategoria andiamo a creare un dettaglio annuncio specifico
		for (Sottocategoria sottocategoria : elencoSottocategorie) {
			DettagliAnnunciCasaPersona dettaglio = new DettagliAnnunciCasaPersona();
			dettaglio.setSottocategoria(sottocategoria);

			if (dettaglioGenerale == null) {
				updateAllDettagliAnnunci();
			}
			dettaglio.setMotiviSegnalazione(dettaglioGenerale.getMotiviSegnalazione());
			dettaglio.setMotiviRimozione(dettaglioGenerale.getMotiviRimozione());
			dettaglio.setStati(dettaglioGenerale.getStati());
			dettaglio.setTipiInserzionista(dettaglioGenerale.getTipiInserzionista());

			EnumSet<ElencoFeaturesCasaPersona> elencoFeatures = SetOfDataDettagliAnnunciCasaPersona.getFeatures()
																			.get(sottocategoria.getSottocategoria());

			if (elencoFeatures.contains(ElencoFeaturesCasaPersona.CONDIZIONE)) {
				dettaglio.setCondizione(elencoCondizione);
			}

			if (elencoFeatures.contains(ElencoFeaturesCasaPersona.TIPOLOGIA)) {
				dettaglio.setTipologia(elencoTipologia.get(sottocategoria.getSottocategoria()));
			}

			if (elencoFeatures.contains(ElencoFeaturesCasaPersona.PER)) {
				dettaglio.setPer(elencoPer);
			}

			if (elencoFeatures.contains(ElencoFeaturesCasaPersona.FASCI_DI_ETA)) {
				dettaglio.setFasciDiEta(elencoFasciDiEta);
			}

			repositoryCasaPersona.save(dettaglio);
			elencoDettagli.add(dettaglio);
		}

		return elencoDettagli;
	}

	/**
	 * Aggiornamento di tutti i dettagli di un annuncio sport e hobby con valori di default
	 *
	 * @param
	 * @return: dettaglio annuncio aggiornato
	 */
	public List<DettagliAnnunciSportHobby> updateAllDettagliAnnunciSportHobby() {
		deleteAllDettagliAnnunci();	// elimina tutti i dettagli

		// prende tutti i dati di default per l'aggiornamento
		Map<String, List<String>> elencoTipologia = SetOfDataDettagliAnnunciSportHobby.getElencoTipologia();
		List<String> elencoCondizione = SetOfDataDettagliAnnunciSportHobby.getElencoCondizione();

		// inizializza le variabili
		List<DettagliAnnunciSportHobby> elencoDettagli = new ArrayList<>();
		List<Sottocategoria> elencoSottocategorie = serviceSottocategoria.findAllSottocategoria();
		elencoSottocategorie.removeIf(sottocategoria -> !sottocategoria.getCategoria().equals(SetOfDataSottocategoria.SPORT));

		// per ogni sottocategoria andiamo a creare un dettaglio annuncio specifico
		for (Sottocategoria sottocategoria : elencoSottocategorie) {
			DettagliAnnunciSportHobby dettaglio = new DettagliAnnunciSportHobby();
			dettaglio.setSottocategoria(sottocategoria);

			if (dettaglioGenerale == null) {
				updateAllDettagliAnnunci();
			}
			dettaglio.setMotiviSegnalazione(dettaglioGenerale.getMotiviSegnalazione());
			dettaglio.setMotiviRimozione(dettaglioGenerale.getMotiviRimozione());
			dettaglio.setStati(dettaglioGenerale.getStati());
			dettaglio.setTipiInserzionista(dettaglioGenerale.getTipiInserzionista());

			EnumSet<ElencoFeaturesSportHobby> elencoFeatures = SetOfDataDettagliAnnunciSportHobby.getFeatures()
																			.get(sottocategoria.getSottocategoria());

			if (elencoFeatures.contains(ElencoFeaturesSportHobby.CONDIZIONE)) {
				dettaglio.setCondizione(elencoCondizione);
			}

			if (elencoFeatures.contains(ElencoFeaturesSportHobby.TIPOLOGIA)) {
				dettaglio.setTipologia(elencoTipologia.get(sottocategoria.getSottocategoria()));
			}

			repositorySportHobby.save(dettaglio);
			elencoDettagli.add(dettaglio);
		}

		return elencoDettagli;
	}

	/**
	 * Aggiornamento di tutti i dettagli di un annuncio in città con valori di default
	 *
	 * @param
	 * @return: dettaglio annuncio aggiornato
	 */
	public List<DettagliAnnunciInCitta> updateAllDettagliAnnunciInCitta() {
		deleteAllDettagliAnnunci();	// elimina tutti i dettagli

		// prende tutti i dati di default per l'aggiornamento
		Map<String, List<String>> elencoTipoAttivita = SetOfDataDettagliAnnunciInCitta.getElencoTipoAttivita();
		Map<String, List<String>> elencoTipoOccasione = SetOfDataDettagliAnnunciInCitta.getElencoTipoOccasione();

		// inizializza le variabili
		List<DettagliAnnunciInCitta> elencoDettagli = new ArrayList<>();
		List<Sottocategoria> elencoSottocategorie = serviceSottocategoria.findAllSottocategoria();
		elencoSottocategorie.removeIf(sottocategoria -> !sottocategoria.getCategoria().equals(SetOfDataSottocategoria.CITTA));

		// per ogni sottocategoria andiamo a creare un dettaglio annuncio specifico
		for (Sottocategoria sottocategoria : elencoSottocategorie) {
			DettagliAnnunciInCitta dettaglio = new DettagliAnnunciInCitta();
			dettaglio.setSottocategoria(sottocategoria);

			if (dettaglioGenerale == null) {
				updateAllDettagliAnnunci();
			}
			dettaglio.setMotiviSegnalazione(dettaglioGenerale.getMotiviSegnalazione());
			dettaglio.setMotiviRimozione(dettaglioGenerale.getMotiviRimozione());
			dettaglio.setStati(dettaglioGenerale.getStati());
			dettaglio.setTipiInserzionista(dettaglioGenerale.getTipiInserzionista());

			dettaglio.setTipoAttivita(elencoTipoAttivita.get(sottocategoria.getSottocategoria()));
			dettaglio.setTipoOccasione(elencoTipoOccasione.get(sottocategoria.getSottocategoria()));

			repositoryInCitta.save(dettaglio);
			elencoDettagli.add(dettaglio);
		}

		return elencoDettagli;
	}

	/**
	 * Aggiornamento di tutti i dettagli di un annuncio formazione con valori di default
	 *
	 * @param
	 * @return: dettaglio annuncio aggiornato
	 */
	public List<DettagliAnnunciFormazione> updateAllDettagliAnnunciFormazione() {
		deleteAllDettagliAnnunci();	// elimina tutti i dettagli

		// prende tutti i dati di default per l'aggiornamento
		Map<String, List<String>> elencoTipologiaCorso = SetOfDataDettagliAnnunciFormazione.getElencoTipologiaCorso();

		// inizializza le variabili
		List<DettagliAnnunciFormazione> elencoDettagli = new ArrayList<>();
		List<Sottocategoria> elencoSottocategorie = serviceSottocategoria.findAllSottocategoria();
		elencoSottocategorie.removeIf(sottocategoria -> !sottocategoria.getCategoria()
																		.equals(SetOfDataSottocategoria.FORMAZIONE));

		// per ogni sottocategoria andiamo a creare un dettaglio annuncio specifico
		for (Sottocategoria sottocategoria : elencoSottocategorie) {
			DettagliAnnunciFormazione dettaglio = new DettagliAnnunciFormazione();
			dettaglio.setSottocategoria(sottocategoria);

			if (dettaglioGenerale == null) {
				updateAllDettagliAnnunci();
			}
			dettaglio.setMotiviSegnalazione(dettaglioGenerale.getMotiviSegnalazione());
			dettaglio.setMotiviRimozione(dettaglioGenerale.getMotiviRimozione());
			dettaglio.setStati(dettaglioGenerale.getStati());
			dettaglio.setTipiInserzionista(dettaglioGenerale.getTipiInserzionista());

			dettaglio.setTipologieCorso(elencoTipologiaCorso.get(sottocategoria.getSottocategoria()));

			repositoryFormazione.save(dettaglio);
			elencoDettagli.add(dettaglio);
		}

		return elencoDettagli;
	}
}
