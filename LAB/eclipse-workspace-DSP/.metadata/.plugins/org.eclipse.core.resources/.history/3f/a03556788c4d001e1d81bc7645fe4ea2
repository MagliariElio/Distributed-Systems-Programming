package ciociaria.annunci.it.service;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.zip.CRC32;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import ciociaria.annunci.it.controller.dto.AnnuncioMotoriDto;
import ciociaria.annunci.it.controller.dto.mapper.AnnuncioMotoriDtoMapper;
import ciociaria.annunci.it.model.bean.Amministratore;
import ciociaria.annunci.it.model.bean.AnnuncioMotori;
import ciociaria.annunci.it.model.bean.DataAnnuncio;
import ciociaria.annunci.it.model.bean.Modifica;
import ciociaria.annunci.it.model.bean.Stato;
import ciociaria.annunci.it.model.repository.AnnunciMotoriRepository;
import ciociaria.annunci.it.utils.DataAccessValidationException;
import ciociaria.annunci.it.utils.StatoEnum;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import jakarta.validation.Validator;

@Service
public class AnnunciService {

	private static final Logger logger = LoggerFactory.getLogger(AnnunciService.class);

	@Autowired
	private AnnunciMotoriRepository repositoryMotori;
	@Autowired
	private AnnuncioMotoriDtoMapper mapperAnnuncioMotori;

	@Autowired
	private UtenteService utenteService;

	private final String UTENTE_AMMINISTRATORE = "Amministratore";	// TODO: da eliminare
	private final String PATH_SAVE_IMG = "src/main/resources/img/";	// dove vengono salvate le immagini

	@Autowired
	private Validator validator;

	/**
	 * Restituisce tutti gli annunci per la categoria motori registrati nel database
	 *
	 * @return: elenco degli annunci motori
	 */
	public List<AnnuncioMotori> findAllAnnunciMotori() {
		return repositoryMotori.findAll();
	}

	/**
	 * Salva all'interno del database l'annuncio passato tra i parametri
	 * 
	 * @param: annuncio
	 * @throws Exception
	 */
	public void saveAnnuncioMotori(AnnuncioMotoriDto annuncioDto) {
		try {
			AnnuncioMotori annuncio = mapperAnnuncioMotori.apply(annuncioDto);		// mapping dto - bean

			Amministratore utente = utenteService.findUtenteAmministratoreByUsername(UTENTE_AMMINISTRATORE);	// ricerca dell'utente nel database

			// modifica di default per un nuovo annuncio
			annuncio.setInseritoDa(utente);									// TODO: impostazione temporanea, appena viene implementata il login deve essere rimossa
			annuncio.setNumeroVisite(0);																			// numero di visite impostate di default a zero
			annuncio.setDataAnnuncio(new DataAnnuncio(LocalDateTime.now(), LocalDateTime.now().plusMonths(4)));		// data di scadenza tra 4 mesi dall'inserimento
			annuncio.setStato(new Stato(StatoEnum.Attivo.toString(), LocalDateTime.now()));							// stato attivo con data corrente di inserimento
			annuncio.setModifica(new Modifica(utente, LocalDateTime.now()));

			// calcolo dell'id da mostrare all'utente
			long current = Instant.now().toEpochMilli();
			String param = annuncio.getInseritoDa().getId() + current;
			String id = calculateCRC32Hash(param);
			annuncio.setIdAnnuncio(id);

			// salva le immagini inserite dall'utente
			List<String> pathImages = new ArrayList<>();
			for (int i = 0; i < annuncioDto.getFotoAnnuncio().size(); i++) {
				try {
					MultipartFile image = annuncioDto.getFotoAnnuncio().get(i);

					SimpleDateFormat formatDate = new SimpleDateFormat("yyyyMMddHHmmssSSS");
					String date = formatDate.format(new Date());
					String nameImage = String.format("%s_%s_%d.png", annuncio.getIdAnnuncio(), date, i);
					
					Path pathImage = Paths.get(PATH_SAVE_IMG, nameImage);
					File targetFile = pathImage.toFile();
					image.transferTo(targetFile);

					pathImages.add(nameImage);								// aggiunta all'elenco delle foto dell'annuncio
				} catch (Exception e) {
				}
			}
			annuncio.setFotoAnnuncio(pathImages);

			System.out.println(annuncio);

			Set<ConstraintViolation<AnnuncioMotori>> violations = validator.validate(annuncio);
			if (!violations.isEmpty()) {
				throw new ConstraintViolationException(violations);
			}

			logger.info("Inserimento di un nuovo annuncio effettuato da {}", annuncio.getInseritoDa().getEmail());
			// repositoryMotori.save(annuncio);
		} catch (ConstraintViolationException e) {
			String errorMessage = "Errore di validazione durante l'inserimento dell'annuncio: " + e.getMessage();
			logger.error(errorMessage);
			throw new DataAccessValidationException(errorMessage);
		} catch (DataAccessException e) {
			String errorMessage = "Errore durante l'inserimento, non Ã¨ stato possibile salvare l'annuncio";
			logger.error(errorMessage + ": " + e.getMessage());
			throw new DataAccessValidationException(errorMessage);
		} catch (Exception e) {
			String errorMessage = "Errore di tipo generico durante l'inserimento dell'annuncio";
			logger.error(errorMessage + ": " + e.getMessage());
			throw new DataAccessValidationException(errorMessage);
		}
		return;
	}

	/**
	 * Algoritmo utilizzato per calcolare l'id dell'annuncio da mostrare all'utente
	 * 
	 * @param input
	 * @return id
	 */
	public static String calculateCRC32Hash(String input) {
		CRC32 crc32 = new CRC32();
		crc32.update(input.getBytes());
		return String.format("%08x", crc32.getValue());
	}

}
